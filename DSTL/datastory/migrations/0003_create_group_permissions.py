# Generated by Django 4.2.1 on 2023-08-02 02:35

from __future__ import unicode_literals
from itertools import chain

from django.db import migrations


def populate_permissions_lists(apps):
    permission_class = apps.get_model('auth', 'Permission')

    argument_permissions = permission_class.objects.filter(content_type__app_label='datastory',
                                                           content_type__model='argument')

    motivation_permissions = permission_class.objects.filter(content_type__app_label='datastory',
                                                             content_type__model='motivation')

    attitude_permissions = permission_class.objects.filter(content_type__app_label='datastory',
                                                           content_type__model='attitude')

    strategy_permissions = permission_class.objects.filter(content_type__app_label='datastory',
                                                           content_type__model='strategy')

    dimension_permissions = permission_class.objects.filter(content_type__app_label='datastory',
                                                            content_type__model='dimension')

    datastory_permissions = permission_class.objects.filter(content_type__app_label='datastory',
                                                            content_type__model='datastory')

    perm_view_argument = permission_class.objects.filter(content_type__app_label='datastory',
                                                         content_type__model='argument',
                                                         codename='view_argument')

    perm_view_motivation = permission_class.objects.filter(content_type__app_label='datastory',
                                                           content_type__model='motivation',
                                                           codename='view_motivation')

    perm_view_attitude = permission_class.objects.filter(content_type__app_label='datastory',
                                                         content_type__model='attitude',
                                                         codename='view_attitude')

    perm_view_strategy = permission_class.objects.filter(content_type__app_label='datastory',
                                                         content_type__model='strategy',
                                                         codename='view_strategy')

    perm_view_dimension = permission_class.objects.filter(content_type__app_label='datastory',
                                                          content_type__model='dimension',
                                                          codename='view_dimension')

    perm_view_datastory = permission_class.objects.filter(content_type__app_label='datastory',
                                                          content_type__model='strategy',
                                                          codename='view_strategy')

    dstl_user_permissions = chain(
        perm_view_argument,
        perm_view_motivation,
        perm_view_attitude,
        perm_view_strategy,
        perm_view_dimension,
        perm_view_datastory,
        dimension_permissions,
        datastory_permissions)

    dstl_staff_permissions = chain(
        argument_permissions,
        motivation_permissions,
        attitude_permissions,
        strategy_permissions,
        perm_view_dimension,
        perm_view_datastory)

    my_groups_initialization_list = [
        {
            "name": "dstl_user",
            "permissions_list": dstl_user_permissions,
        },
        {
            "name": "dstl_staff",
            "permissions_list": dstl_staff_permissions,
        },
    ]
    return my_groups_initialization_list


def add_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    group_model_class = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = group_model_class.objects.get(
                name=group['name']
            )
            group_object.permissions.set(group['permissions_list'])
            group_object.save()


def remove_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    group_model_class = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = group_model_class.objects.get(
                name=group['name']
            )
            list_of_permissions = group['permissions_list']
            for permission in list_of_permissions:
                group_object.permissions.remove(permission)
                group_object.save()


class Migration(migrations.Migration):
    dependencies = [
        ('datastory', '0002_create_groups'),
    ]

    operations = [
        migrations.RunPython(
            add_group_permissions_data,
            remove_group_permissions_data
        )
    ]
